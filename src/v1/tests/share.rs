#[macro_export]
macro_rules! repo {
  () => {{
    use crate::v1::repo::Repo;
    use crate::v1::store;

    use crate::v1::Req;
    use std::sync::Arc;
    let storage = Arc::new(store::Storage::new());
    Repo::new(&Req::new(), &storage.clone())
  }};
}
#[macro_export]
macro_rules! conn {
  ("new") => {{
    use crate::v1::{Config, Conn};
    use std::sync::Arc;
    let config = Arc::new(Config::new());
    Conn::new(config)
  }};
  ($buffer:expr, $end:expr) => {{
    use crate::v1::tests::share;
    let mut conn = conn!("new");
    let (buffer, end) = share::custom_data($buffer, $end);
    conn.parse(&buffer, end).unwrap();
    conn
  }};
  () => {{
    let mut conn = conn!("new");
    let (buffer, end) = share::data();
    conn.parse(&buffer, end).unwrap();
    let storage = Arc::new(store::Storage::new());
    conn.router(storage);
    conn
  }};
}

pub fn custom_data(method: &str, path: &str) -> ([u8; 1024], usize) {
  let mut buffer = [0; 1024];
  let left = format!("{} {} ", method, path);
  let right = "HTTP/1.1\r\nHost: localhost:4000\r\nConnection: keep-alive\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36\r\nAccept: */*\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: cors\r\nReferer: http://localhost:4000/spoken\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en,es;q=0.9\r\n\r\n";
  let both = format!("{}{}", left, right);
  let mut end = 0;
  for n in both.bytes() {
    buffer[end] = n;
    end += 1;
  }
  (buffer, end)
}

pub fn data() -> ([u8; 1024], usize) {
  let data = [
    71, 69, 84, 32, 47, 115, 112, 111, 107, 101, 110, 47, 101, 115, 112, 97, 110, 111, 108, 47, 49,
    32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 72, 111, 115, 116, 58, 32, 108, 111, 99, 97, 108,
    104, 111, 115, 116, 58, 52, 48, 48, 48, 13, 10, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110,
    58, 32, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 13, 10, 67, 97, 99, 104, 101, 45, 67,
    111, 110, 116, 114, 111, 108, 58, 32, 109, 97, 120, 45, 97, 103, 101, 61, 48, 13, 10, 85, 112,
    103, 114, 97, 100, 101, 45, 73, 110, 115, 101, 99, 117, 114, 101, 45, 82, 101, 113, 117, 101,
    115, 116, 115, 58, 32, 49, 13, 10, 85, 115, 101, 114, 45, 65, 103, 101, 110, 116, 58, 32, 77,
    111, 122, 105, 108, 108, 97, 47, 53, 46, 48, 32, 40, 77, 97, 99, 105, 110, 116, 111, 115, 104,
    59, 32, 73, 110, 116, 101, 108, 32, 77, 97, 99, 32, 79, 83, 32, 88, 32, 49, 48, 95, 49, 53, 95,
    49, 41, 32, 65, 112, 112, 108, 101, 87, 101, 98, 75, 105, 116, 47, 53, 51, 55, 46, 51, 54, 32,
    40, 75, 72, 84, 77, 76, 44, 32, 108, 105, 107, 101, 32, 71, 101, 99, 107, 111, 41, 32, 67, 104,
    114, 111, 109, 101, 47, 55, 57, 46, 48, 46, 51, 57, 52, 53, 46, 56, 56, 32, 83, 97, 102, 97,
    114, 105, 47, 53, 51, 55, 46, 51, 54, 13, 10, 83, 101, 99, 45, 70, 101, 116, 99, 104, 45, 85,
    115, 101, 114, 58, 32, 63, 49, 13, 10, 65, 99, 99, 101, 112, 116, 58, 32, 116, 101, 120, 116,
    47, 104, 116, 109, 108, 44, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 120, 104,
    116, 109, 108, 43, 120, 109, 108, 44, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47,
    120, 109, 108, 59, 113, 61, 48, 46, 57, 44, 105, 109, 97, 103, 101, 47, 119, 101, 98, 112, 44,
    105, 109, 97, 103, 101, 47, 97, 112, 110, 103, 44, 42, 47, 42, 59, 113, 61, 48, 46, 56, 44, 97,
    112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 115, 105, 103, 110, 101, 100, 45, 101, 120,
    99, 104, 97, 110, 103, 101, 59, 118, 61, 98, 51, 59, 113, 61, 48, 46, 57, 13, 10, 83, 101, 99,
    45, 70, 101, 116, 99, 104, 45, 83, 105, 116, 101, 58, 32, 110, 111, 110, 101, 13, 10, 83, 101,
    99, 45, 70, 101, 116, 99, 104, 45, 77, 111, 100, 101, 58, 32, 110, 97, 118, 105, 103, 97, 116,
    101, 13, 10, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 103,
    122, 105, 112, 44, 32, 100, 101, 102, 108, 97, 116, 101, 44, 32, 98, 114, 13, 10, 65, 99, 99,
    101, 112, 116, 45, 76, 97, 110, 103, 117, 97, 103, 101, 58, 32, 101, 110, 44, 101, 115, 59,
    113, 61, 48, 46, 57, 13, 10, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ];
  (data, 538)
}
